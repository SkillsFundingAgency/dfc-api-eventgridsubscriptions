resources:
  repositories:
  - repository: self
  - repository: dfc-devops
    type: github
    name: SkillsFundingAgency/dfc-devops
    ref: refs/tags/v1.11.2
    endpoint: 'GitHub (ESFA)'

pool:
  name: NCS - CI and CD
  demands:
  - msbuild
  - visualstudio

trigger: 
  branches:
    include: 
    - dev
    - master

pr:
  branches:
    include: 
    - dev
    - master

stages:
- stage: Build
  jobs:

  - job: BuildArmTemplates
    displayName: "Build and test ARM template"
    workspace:
      clean: all
    pool: 'NCS - CI and CD'
    steps:
    - template: /AzureDevOpsTemplates/Build/StepTemplates/dfc-arm-build.yml@dfc-devops
      parameters:
        ArmTemplateRoot: "$(System.DefaultWorkingDirectory)/Resources/ArmTemplates"
        SolutionBaseName: 'DFC.Api.EventGridSubscriptions'

    - task: CopyFiles@2
      displayName: 'Copy PSScripts Files to: $(Build.ArtifactStagingDirectory)'
      inputs:
        Contents: 'PSScripts/**/*.ps1'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/Resources/PSScripts'
        flattenFolders: true

    - task: PublishPipelineArtifact@0
      displayName: Publish PSScripts Pipeline Artifact
      inputs:
        targetPath: $(Build.ArtifactStagingDirectory)/Resources/PSScripts
        artifactName: DFC.Api.EventGridSubscriptions.PSScripts

    - task: PublishPipelineArtifact@1
      displayName: Publish OpenAPI docs to Pipeline Artifact
      inputs:
        targetPath: "$(System.DefaultWorkingDirectory)/DFC.EventGridSubscriptions.ApiFunction/OpenAPIDocs"
        artifactName: DFC.Api.EventGridSubscriptions.Resources.OpenAPIDocs

    - task: PublishPipelineArtifact@1
      displayName: Publish API import script to Pipeline Artifact
      inputs:
        targetPath: "$(System.DefaultWorkingDirectory)/Resources/Scripts"
        artifactName: DFC.Api.EventGridSubscriptions.Resources.Scripts

  #Build and test the application
  - job: BuildTestAndAnalyze
    displayName: "Build and test application"
    pool:
      name: NCS - CI and CD
      demands:
      - msbuild
      - visualstudio
    steps:
    - template: AzureDevOpsTemplates\Build\StepTemplates\dfc-dotnetcore-build-sonar.yml@dfc-devops
      parameters:
        SolutionBaseName: 'DFC.EventGridSubscriptions.ApiFunction'
        BuildPlatform: 'any cpu'
        BuildConfiguration: 'release'
        PublishWebApp: true
        TestSuffix: 'UnitTests'
        DotNetCoreVersion: '3.1.100'

- stage: DeployToDevEventGridSubscriptions
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  displayName: Deploy to DEV_EventGridSubscriptions
  variables:
  - group: dfc-shared-all
  - group: dfc-api-eventgridsubscriptions-dev
  - group: dfc-shared-dev
  - group: dfc-app-shared-all
  - group: dfc-app-shared-dev
  - group: dfc-compositeui-all
  - template: VariableTemplates\DevEnvironmentVariables.yml
  - name: WebAppPrefix
    value: dfc-dev
  jobs:
  - template: JobTemplates/deploy-environment.yml
    parameters:
      AzureSubscription: 'SFA-CDH-Dev/Test (962cae10-2950-412a-93e3-d8ae92b17896)'
      EnvironmentTag: '$(EnvironmentTag)'
      ParentBusiness: '$(ParentBusiness)'
      ServiceOffering: '$(ServiceOffering)'
      ResourceGroup: 'dfc-dev-api-eventgridsubscriptions-rg'
      PackageFile:  "$(Pipeline.Workspace)/DFC.EventGridSubscriptions.ApiFunction.DeploymentPackages/DFC.EventGridSubscriptions.ApiFunction.zip"
      ApimProductId: "$(ApimProductId)"
      ApimLoggerName: "$(ApimLoggerName)"
      APIProductInstanceName: "$(ApimProductInstanceName)"
      ArmTemplateFolder: "$(Pipeline.Workspace)/DFC.Api.EventGridSubscriptions.Resources.ArmTemplates/"
      ApimImportScript: "$(Pipeline.Workspace)/DFC.Api.EventGridSubscriptions.Resources.Scripts/Import-ApimOpenApiDefinitionFromFile.ps1"
      SpecificationPath: "$(Pipeline.Workspace)/DFC.Api.EventGridSubscriptions.Resources.OpenApiDocs"
      SharedResourceGroup: "$(SharedResourceGroup)"
      ApimServiceName: "$(ApimServiceName)"
      FunctionAppDomain: "$(FunctionAppDomain)"
      FunctionAppName: 'dfc-dev-api-eventgridsubscriptions-fa'
      EnvironmentName: DEV_EventGridSubscriptions
      DFCAzureDevOpsProjectGuid: $(DFCAzureDevOpsProjectGuid)
      # The Apis parameter requires a complex object be passed in,  which requires some odd looking yaml.
      # The top level -`s here defines an array of "something"
      # The inner level -'s defines an array of mappings.
      Apis: 
        -
          - name: Subscription
            azureFunctionName: '${{ variables.WebAppPrefix }}-api-eventgridsubscriptions-fa'

- stage: DeployEventSubscription
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  displayName: Deploy Event Subscription
  dependsOn: DeployToDevEventGridSubscriptions
  variables:
  - group: dfc-shared-all
  - group: dfc-api-eventgridsubscriptions-dev
  - group: dfc-shared-dev
  - group: dfc-app-shared-all
  - group: dfc-app-shared-dev
  - group: dfc-compositeui-all
  - template: VariableTemplates\DevEnvironmentVariables.yml
  - name: WebAppPrefix
    value: dfc-dev
  jobs:
  - job: DeployEventSub
    steps:
    - task: AzurePowerShell@4
      displayName: Azure CLI
      inputs:
        azureSubscription: 'SFA-CDH-Dev/Test (962cae10-2950-412a-93e3-d8ae92b17896)'
        azurePowerShellVersion: LatestVersion
        ScriptType: InlineScript
        ScriptPath: |
          Set-AzContext -SubscriptionId '962cae10-2950-412a-93e3-d8ae92b17896' -Verbose
          $containername = "event-grid-dead-letter-events" -Verbose
          $topicid = (Get-AzEventGridTopic -ResourceGroupName dfc-dev-stax-editor-rg -Name dfc-dev-stax-egt).Id -Verbose
          $storageid = (Get-AzStorageAccount -ResourceGroupName dfc-dev-compui-shared-rg -Name dfcdevcompuisharedstr).Id -Verbose
          New-AzEventGridSubscription -ResourceId $topicid -EventSubscriptionName 'dfc-dead-letter' -Endpoint 'https://dfc-dev-api-eventgridsubscriptions-fa.azurewebsites.net/api/DeadLetter/api/updates' -DeadLetterEndpoint '$storageid/blobServices/default/containers/$containername' -Verbose 

    # - task: AzurePowerShell@4
    #   displayName: 'Create Event Subscription'
    #   inputs:
    #     azureSubscription: 'SFA-CDH-Dev/Test (962cae10-2950-412a-93e3-d8ae92b17896)'
    #     ScriptPath: "$(Pipeline.Workspace)/DFC.Api.EventGridSubscriptions.Resources.Scripts/Create-Event-Subscription.ps1"
    #     azurePowerShellVersion: LatestVersion


- stage: DeployToSITEventGridSubscriptions
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  displayName: Deploy to SIT_EventGridSubscriptions
  variables:
  - group: dfc-shared-all
  - group: dfc-api-eventgridsubscriptions-sit
  - group: dfc-shared-sit
  - group: dfc-app-shared-all
  - group: dfc-app-shared-sit
  - group: dfc-compositeui-all
  - template: VariableTemplates\SitEnvironmentVariables.yml
  - name: WebAppPrefix
    value: dfc-sit
  jobs:
  - template: JobTemplates/deploy-environment.yml
    parameters:
      AzureSubscription: 'SFA-CDH-Dev/Test (962cae10-2950-412a-93e3-d8ae92b17896)'
      EnvironmentTag: '$(EnvironmentTag)'
      ParentBusiness: '$(ParentBusiness)'
      ServiceOffering: '$(ServiceOffering)'
      ResourceGroup: 'dfc-sit-api-eventgridsubscriptions-rg'
      PackageFile:  "$(Pipeline.Workspace)/DFC.EventGridSubscriptions.ApiFunction.DeploymentPackages/DFC.EventGridSubscriptions.ApiFunction.zip"
      ApimProductId: "$(ApimProductId)"
      ApimLoggerName: "$(ApimLoggerName)"
      APIProductInstanceName: "$(ApimProductInstanceName)"
      ArmTemplateFolder: "$(Pipeline.Workspace)/DFC.Api.EventGridSubscriptions.Resources.ArmTemplates/"
      ApimImportScript: "$(Pipeline.Workspace)/DFC.Api.EventGridSubscriptions.Resources.Scripts/Import-ApimOpenApiDefinitionFromFile.ps1"
      SpecificationPath: "$(Pipeline.Workspace)/DFC.Api.EventGridSubscriptions.Resources.OpenApiDocs"
      SharedResourceGroup: "$(SharedResourceGroup)"
      ApimServiceName: "$(ApimServiceName)"
      FunctionAppDomain: "$(FunctionAppDomain)"
      FunctionAppName: 'dfc-sit-api-eventgridsubscriptions-fa'
      EnvironmentName: SIT_EventGridSubscriptions
      DFCAzureDevOpsProjectGuid: $(DFCAzureDevOpsProjectGuid)
      # The Apis parameter requires a complex object be passed in,  which requires some odd looking yaml.
      # The top level -`s here defines an array of "something"
      # The inner level -'s defines an array of mappings.
      Apis: 
        -
          - name: Subscription
            azureFunctionName: '${{ variables.WebAppPrefix }}-api-eventgridsubscriptions-fa'
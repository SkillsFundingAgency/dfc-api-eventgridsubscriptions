parameters:
  AzureSubscription: ''
  WebAppName: ''
  ResourceGroup: ''
  FunctionAppDomain: ''
  PackageFile: ''
  FunctionType: ''
  SharedResourceGroup: ''
  ApimServiceName: ''
  ApimImportScript: ''
  SpecificationPath: ''
  APIMPolicyPath: ''

steps:
- checkout: dfc-devops
  path: 's/dfc-devops/'

- task: AzureRmWebAppDeployment@4
  displayName: 'Azure App Service Deploy: ${{ parameters.WebAppName }}'
  inputs:
    azureSubscription: '${{ parameters.AzureSubscription }}'
    appType: functionApp
    WebAppName: '${{ parameters.WebAppName }}'
    Package: "${{ parameters.PackageFile }}"
    deployToSlotOrASE: true
    ResourceGroupName: '${{ parameters.ResourceGroup }}'
    SlotName: staging

- task: AzureAppServiceManage@0
  displayName: 'Swap Slots: ${{ parameters.WebAppName }}'
  inputs:
    azureSubscription: '${{ parameters.AzureSubscription }}'
    WebAppName: '${{ parameters.WebAppName }}'
    ResourceGroupName: '${{ parameters.ResourceGroup }}'
    SourceSlot: staging

- powershell: |
    Write-Host "##vso[task.setvariable variable=FunctionAppUrl]https://${{ parameters.WebAppName }}.${{ parameters.FunctionAppDomain }}"
  displayName: "Set full hostname as variable"

- task: esfadevops.Tokenization.custom-build-task.Tokenization@0
  displayName: 'Tokenization: Transform file ${{ parameters.FunctionType }}OpenApi.txt'
  inputs:
    SourcePath: '${{ parameters.SpecificationPath }}'
    TargetFileNames: '${{ parameters.FunctionType }}OpenApi.txt'

- task: AzurePowerShell@4
  displayName: 'Import OpenAPI specification'
  inputs:
    azureSubscription: '${{ parameters.AzureSubscription }}'
    ScriptPath: '${{ parameters.ApimImportScript }}'
    ScriptArguments: "-ApimResourceGroup '${{ parameters.SharedResourceGroup }}' -InstanceName '${{ parameters.ApimServiceName }}' -ApiName '${{ parameters.FunctionType }}' -OpenApiSpecificationFile '${{ parameters.SpecificationPath }}/${{ parameters.FunctionType }}OpenApi.txt'"
    azurePowerShellVersion: LatestVersion

- task: esfadevops.Tokenization.custom-build-task.Tokenization@0
  displayName: 'Tokenization: Transform file APIM Policy File'
  inputs:
    SourcePath: '${{ parameters.APIMPolicyPath }}'
    TargetFileNames: 'ApimPolicy-IsolatedFunctionAppAsEventGridWebhookEndpoint.xml'

# - task: AzurePowerShell@5
#   displayName: 'Apply EventGrid APIM Policy'
#   inputs:
#     azureSubscription: '${{ parameters.AzureSubscription }}'
#     ScriptType: InlineScript
#     Inline: |
#       $context = New-AzApiManagementContext -ResourceGroupName "$(SharedResourceGroupName)" -ServiceName "$(ApimServiceName)"
      
#       $policyFilePath = "$(System.DefaultWorkingDirectory)/DFC.Api.EventGridSubscriptions.Resources.ApimPolicies/ApimPolicy-IsolatedFunctionAppAsEventGridWebhookEndpoint.xml"
      
#       $apiNames = 'tbc'
      
#       $apiOperationNames = 'tbc'
      
#       foreach ($apiName in $apiNames) {
#           $api = ""
      
#           $api = Get-AzApiManagementApi -Context $Context -Name $apiName
      
#           foreach ($apiOperationName in $apiOperationNames) {
#               $operation = ""
      
#               $operation = Get-AzApiManagementOperation -Context $Context -ApiId $api.ApiId | where {$_.Name -eq $apiOperationName}
      
#               Write-Output "Applying policy to API: $($api.name) Operation: $($operation.name)"
      
#               Set-AzApiManagementPolicy -Context $Context -Format application/vnd.ms-azure-apim.policy.raw+xml -ApiId $api.ApiId -OperationId $operation.OperationId -PolicyFilePath $PolicyFilePath -Verbose
#           }
#       }
#     azurePowerShellVersion: LatestVersion 